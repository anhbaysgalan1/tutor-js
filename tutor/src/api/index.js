// Generated by CoffeeScript 1.11.1
(function() {
  var BOOTSTRAPED_MODELS, CCDashboardActions, CourseActions, CourseCreate, CourseEnroll, CourseGuideActions, CourseListingActions, CoursePracticeActions, CourseStudentTasks, Courses, EcosystemsActions, ExerciseActions, ExerciseStore, Hypothesis, JobActions, NotificationActions, Offerings, PastTaskPlansActions, Payments, PerformanceForecast, PeriodActions, Purchase, Purchases, ReferenceBookActions, ReferenceBookExerciseActions, ReferenceBookPageActions, RosterActions, RosterStore, ScoresActions, ScoresExportActions, Student, StudentTask, TaskActions, TaskPanelActions, TaskPlanActions, TaskPlanHelpers, TaskPlanStatsActions, TaskPlanStore, TaskStepActions, TaskTeacherReviewActions, TeacherTaskPlans, Term, TocActions, User, UserTerms, assign, connectCreate, connectDelete, connectModelCreate, connectModelDelete, connectModelRead, connectModelUpdate, connectModify, connectRead, connectUpdate, pick, ref, ref1, ref2, ref3, ref4, start, startAPI,
    slice = [].slice;

  ref = require('./adapter'), connectModify = ref.connectModify, connectCreate = ref.connectCreate, connectRead = ref.connectRead, connectUpdate = ref.connectUpdate, connectDelete = ref.connectDelete, connectModelCreate = ref.connectModelCreate, connectModelRead = ref.connectModelRead, connectModelUpdate = ref.connectModelUpdate, connectModelDelete = ref.connectModelDelete;

  pick = require('lodash/pick');

  assign = require('lodash/assign');

  CourseActions = require('../flux/course').CourseActions;

  CoursePracticeActions = require('../flux/practice').CoursePracticeActions;

  CourseGuideActions = require('../flux/guide').CourseGuideActions;

  JobActions = require('../flux/job').JobActions;

  EcosystemsActions = require('../flux/ecosystems').EcosystemsActions;

  PerformanceForecast = require('../flux/performance-forecast');

  ScoresActions = require('../flux/scores').ScoresActions;

  ScoresExportActions = require('../flux/scores-export').ScoresExportActions;

  ref1 = require('../flux/roster'), RosterActions = ref1.RosterActions, RosterStore = ref1.RosterStore;

  PeriodActions = require('../flux/period').PeriodActions;

  TaskActions = require('../flux/task').TaskActions;

  TaskPanelActions = require('../flux/task-panel').TaskPanelActions;

  TaskStepActions = require('../flux/task-step').TaskStepActions;

  ref2 = require('../flux/task-plan'), TaskPlanActions = ref2.TaskPlanActions, TaskPlanStore = ref2.TaskPlanStore;

  TaskTeacherReviewActions = require('../flux/task-teacher-review').TaskTeacherReviewActions;

  TaskPlanStatsActions = require('../flux/task-plan-stats').TaskPlanStatsActions;

  PastTaskPlansActions = require('../flux/past-task-plans').PastTaskPlansActions;

  TocActions = require('../flux/toc').TocActions;

  ref3 = require('../flux/exercise'), ExerciseActions = ref3.ExerciseActions, ExerciseStore = ref3.ExerciseStore;

  CourseListingActions = require('../flux/course-listing').CourseListingActions;

  CCDashboardActions = require('../flux/cc-dashboard').CCDashboardActions;

  ReferenceBookActions = require('../flux/reference-book').ReferenceBookActions;

  ReferenceBookPageActions = require('../flux/reference-book-page').ReferenceBookPageActions;

  ReferenceBookExerciseActions = require('../flux/reference-book-exercise').ReferenceBookExerciseActions;

  NotificationActions = require('../flux/notifications').NotificationActions;

  TaskPlanHelpers = require('../helpers/task-plan')["default"];

  User = require('../models/user')["default"];

  ref4 = require('../models/user/terms'), UserTerms = ref4.UserTerms, Term = ref4.Term;

  Courses = require('../models/courses-map')["default"];

  Offerings = require('../models/course/offerings')["default"];

  CourseCreate = require('../models/course/create')["default"];

  TeacherTaskPlans = require('../models/teacher-task-plans')["default"];

  Student = require('../models/course/student')["default"];

  CourseEnroll = require('../models/course/enroll')["default"];

  Payments = require('../models/payments')["default"];

  Hypothesis = require('../models/hypothesis')["default"];

  Purchases = require('../models/purchases')["default"];

  Purchase = require('../models/purchases/purchase')["default"];

  CourseStudentTasks = require('../models/student-tasks').CourseStudentTasks;

  StudentTask = require('../models/student/task')["default"];

  startAPI = function() {
    connectRead(TaskActions, {
      pattern: 'tasks/{id}'
    });
    connectDelete(TaskActions, {
      pattern: 'tasks/{id}'
    });
    connectRead(TaskPlanActions, {
      pattern: 'plans/{id}'
    });
    connectDelete(TaskPlanActions, {
      pattern: 'plans/{id}'
    });
    connectUpdate(TaskPlanActions, {
      data: TaskPlanStore.getChanged
    }, TaskPlanHelpers.apiEndpointOptions);
    connectUpdate(TaskPlanActions, {
      trigger: 'saveSilent',
      handleError: function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        TaskPlanActions.erroredSilent.apply(TaskPlanActions, args);
        return true;
      },
      data: TaskPlanStore.getChanged
    }, TaskPlanHelpers.apiEndpointOptions);
    connectRead(TaskPlanStatsActions, {
      pattern: 'plans/{id}/stats'
    });
    connectRead(TaskTeacherReviewActions, {
      pattern: 'plans/{id}/review'
    });
    connectRead(ExerciseActions, {
      trigger: 'loadForEcosystem',
      onSuccess: 'loadedForEcosystem'
    }, function(id, pageIds, requestType) {
      var params, url;
      if (requestType == null) {
        requestType = 'homework_core';
      }
      url = "ecosystems/" + id + "/exercises/" + requestType;
      params = {
        page_ids: pageIds
      };
      return {
        url: url,
        params: params
      };
    });
    connectRead(ExerciseActions, {
      trigger: 'loadForCourse',
      onSuccess: 'loadedForCourse'
    }, function(id, pageIds, ecosystemId, requestType) {
      var params, url;
      if (ecosystemId == null) {
        ecosystemId = null;
      }
      if (requestType == null) {
        requestType = 'homework_core';
      }
      url = "courses/" + id + "/exercises/" + requestType;
      params = {
        page_ids: pageIds
      };
      if (ecosystemId != null) {
        params.ecosystem_id = ecosystemId;
      }
      return {
        url: url,
        params: params
      };
    });
    connectModify(ExerciseActions, {
      pattern: 'courses/{id}/exercises',
      trigger: 'saveExerciseExclusion',
      onSuccess: 'exclusionsSaved',
      data: function() {
        return _.map(ExerciseStore.getUnsavedExclusions(), function(is_excluded, id) {
          return {
            id: id,
            is_excluded: is_excluded
          };
        });
      }
    });
    connectRead(TocActions, {
      pattern: 'ecosystems/{id}/readings'
    });
    connectRead(CourseGuideActions, {
      pattern: 'courses/{id}/guide'
    });
    connectRead(CourseActions, {
      pattern: 'courses/{id}'
    });
    connectUpdate(CourseActions, {
      pattern: 'courses/{id}'
    }, {
      data: function(id, data) {
        return data;
      }
    });
    connectRead(CCDashboardActions, {
      pattern: 'courses/{id}/cc/dashboard'
    });
    connectRead(CoursePracticeActions, {
      pattern: 'courses/{id}/practice'
    });
    connectCreate(CoursePracticeActions, {
      url: function(arg) {
        var courseId, query, url;
        courseId = arg.courseId, query = arg.query;
        url = "courses/" + courseId + "/practice";
        if (query != null ? query.worst : void 0) {
          return url + "/worst";
        } else {
          return url;
        }
      },
      data: function(arg) {
        var courseId, query;
        courseId = arg.courseId, query = arg.query;
        return query;
      }
    });
    connectRead(PerformanceForecast.Student.actions, {
      pattern: 'courses/{id}/guide'
    });
    connectRead(PerformanceForecast.Teacher.actions, {
      pattern: 'courses/{id}/teacher_guide'
    });
    connectRead(PerformanceForecast.TeacherStudent.actions, function(id, arg) {
      var data, roleId, url;
      roleId = arg.roleId;
      url = "courses/" + id + "/guide/role/" + roleId;
      data = {
        id: id,
        roleId: roleId
      };
      return {
        url: url,
        data: data
      };
    });
    connectRead(ScoresActions, {
      pattern: 'courses/{id}/performance'
    });
    connectRead(ScoresExportActions, {
      pattern: 'courses/{id}/performance/exports'
    });
    connectCreate(ScoresExportActions, {
      pattern: 'courses/{id}/performance/export',
      trigger: 'export',
      onSuccess: 'exported'
    });
    connectModify(ScoresActions, {
      trigger: 'acceptLate',
      onSuccess: 'acceptedLate',
      pattern: 'tasks/{id}/accept_late_work'
    });
    connectModify(ScoresActions, {
      trigger: 'rejectLate',
      onSuccess: 'rejectedLate',
      pattern: 'tasks/{id}/reject_late_work'
    });
    connectRead(JobActions, {
      pattern: 'jobs/{id}',
      handledErrors: ['*']
    });
    connectRead(EcosystemsActions, {
      url: 'ecosystems'
    });
    connectDelete(RosterActions, {
      pattern: 'teachers/{id}',
      trigger: 'teacherDelete',
      onSuccess: 'teacherDeleted'
    });
    connectDelete(RosterActions, {
      pattern: 'students/{id}'
    });
    connectUpdate(RosterActions, {
      pattern: 'students/{id}'
    }, {
      data: function(id, data) {
        return data;
      }
    });
    connectModify(RosterActions, {
      pattern: 'students/{studentId}/undrop',
      trigger: 'undrop',
      onSuccess: 'undropped'
    }, {
      errorHandlers: {
        already_active: 'onUndropAlreadyActive',
        student_identifier_has_already_been_taken: 'recordDuplicateStudentIdError'
      }
    });
    connectUpdate(RosterActions, {
      pattern: 'students/{studentId}',
      trigger: 'saveStudentIdentifier',
      onSuccess: 'savedStudentIdentifier',
      errorHandlers: {
        student_identifier_has_already_been_taken: 'recordDuplicateStudentIdError'
      },
      data: function(arg) {
        var courseId, studentId;
        courseId = arg.courseId, studentId = arg.studentId;
        return {
          student_identifier: RosterStore.getStudentIdentifier(courseId, studentId)
        };
      }
    });
    connectRead(RosterActions, {
      pattern: 'courses/{id}/roster'
    });
    connectCreate(PeriodActions, {
      pattern: 'courses/{id}/periods'
    }, {
      data: function(id, data) {
        return data;
      }
    });
    connectUpdate(PeriodActions, {
      url: function(courseId, periodId, data) {
        return "periods/" + periodId;
      },
      data: function(courseId, periodId, data) {
        return data;
      }
    });
    connectDelete(PeriodActions, {
      pattern: 'periods/{id}'
    });
    connectModify(PeriodActions, {
      pattern: 'periods/{id}/restore',
      trigger: 'restore',
      onSuccess: 'restored'
    });
    connectRead(TaskStepActions, {
      pattern: 'steps/{id}'
    });
    connectRead(TaskStepActions, {
      pattern: 'steps/{id}',
      trigger: 'loadPersonalized'
    }, {
      handleError: function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        TaskStepActions.loadedNoPersonalized.apply(TaskStepActions, args);
        return true;
      }
    });
    connectModify(TaskActions, {
      pattern: 'steps/{id}/completed',
      trigger: 'completeStep',
      onSuccess: 'stepCompleted'
    });
    connectUpdate(TaskStepActions, {
      pattern: 'steps/{id}',
      trigger: 'setFreeResponseAnswer'
    }, {
      data: function(id, freeResponse) {
        return {
          free_response: freeResponse
        };
      }
    });
    connectUpdate(TaskStepActions, {
      pattern: 'steps/{id}',
      trigger: 'setAnswerId'
    }, {
      data: function(id, answerId) {
        return {
          answer_id: answerId
        };
      }
    });
    connectRead(PastTaskPlansActions, function(courseId) {
      return {
        url: "courses/" + courseId + "/plans",
        params: {
          clone_status: 'unused_source'
        }
      };
    });
    connectRead(CourseListingActions, {
      url: 'user/courses'
    });
    connectRead(ReferenceBookActions, {
      pattern: 'ecosystems/{id}/readings'
    });
    connectRead(ReferenceBookPageActions, {
      pattern: 'pages/{id}'
    });
    connectRead(ReferenceBookPageActions, {
      pattern: 'pages/{id}',
      trigger: 'loadSilent',
      handledErrors: ['*']
    });
    connectRead(ReferenceBookExerciseActions, {
      url: function(url) {
        return url;
      }
    });
    connectRead(NotificationActions, {
      trigger: 'loadUpdates',
      onSuccess: 'loadedUpdates',
      url: 'notifications',
      handledErrors: ['*']
    });
    connectModelUpdate(User.constructor, 'saveTourView', {
      pattern: 'user/tours/{id}'
    });
    connectModelRead(UserTerms, 'fetch', {
      onSuccess: 'onLoaded',
      url: 'terms'
    });
    connectModelUpdate(UserTerms, 'sign', {
      onSuccess: 'onSigned',
      pattern: 'terms/{ids}',
      method: 'PUT'
    });
    connectModelRead(Purchases.constructor, 'fetch', {
      onSuccess: 'onLoaded',
      url: 'purchases'
    });
    connectModelUpdate(Purchase, 'refund', {
      onSuccess: 'onRefunded',
      pattern: 'purchases/{item_uuid}/refund',
      method: 'PUT',
      data: function() {
        return {
          survey: this.refund_survey
        };
      }
    });
    connectModelCreate(User.constructor, 'logEvent', {
      pattern: 'log/event/{category}/{code}',
      data: function(arg) {
        var data;
        data = arg.data;
        return {
          data: data
        };
      }
    });
    connectModelRead(Offerings.constructor, 'fetch', {
      url: 'offerings',
      onSuccess: 'onLoaded'
    });
    connectModelCreate(CourseCreate, 'save', {
      onSuccess: 'onCreated'
    });
    connectModelRead(TeacherTaskPlans.constructor, 'fetch', {
      pattern: 'courses/{courseId}/dashboard',
      onSuccess: 'onLoaded',
      params: function(arg) {
        var endAt, id, startAt;
        id = arg.id, startAt = arg.startAt, endAt = arg.endAt;
        return {
          start_at: startAt,
          end_at: endAt
        };
      }
    });
    connectModelUpdate(Student, 'save', {
      pattern: 'user/courses/{courseId}/student',
      onSuccess: 'onSaved'
    });
    connectModelCreate(CourseEnroll, 'create', {
      url: 'enrollment_changes',
      onSuccess: 'onApiRequestComplete',
      onFail: 'setApiErrors'
    });
    connectModelUpdate(CourseEnroll, 'confirm', {
      pattern: 'enrollment_changes/{id}/approve',
      method: 'PUT',
      onSuccess: 'onApiRequestComplete',
      onFail: 'setApiErrors'
    });
    connectModelRead(CourseStudentTasks, 'fetch', {
      onSuccess: 'onLoaded',
      pattern: 'courses/{courseId}/dashboard'
    });
    return connectModelDelete(StudentTask, 'hide', {
      onSuccess: 'onHidden',
      pattern: 'tasks/{id}'
    });
  };

  BOOTSTRAPED_MODELS = {
    user: User,
    courses: Courses,
    payments: Payments
  };

  start = function(bootstrapData) {
    var data, model, storeId;
    for (storeId in BOOTSTRAPED_MODELS) {
      model = BOOTSTRAPED_MODELS[storeId];
      data = bootstrapData[storeId];
      model.bootstrap(data);
    }
    return startAPI();
  };

  module.exports = {
    startAPI: startAPI,
    start: start
  };

}).call(this);

//# sourceMappingURL=index.js.map
